import dash
import dash_core_components as dcc
import dash_html_components as html
import dash_table
import pandas as pd
import sklearn.neural_network as ml
from dash.dependencies import Input, Output
from dash.exceptions import PreventUpdate

df = pd.read_excel("data/Folds5x2_pp.xlsx")
df = df.apply(pd.to_numeric)  # Transfer to Numeric
X = df.loc[:, "AT":"RH"]  # Input Features
y = df["PE"]  # Output Feature
# Neural Network Training
ann = ml.MLPRegressor(activation='logistic', alpha=0.0001, batch_size='auto', beta_1=0.9,
                      beta_2=0.999, early_stopping=False, epsilon=1e-08,
                      hidden_layer_sizes=200, learning_rate='constant',
                      learning_rate_init=0.01, max_fun=15000, max_iter=400, momentum=0.9,
                      n_iter_no_change=10, nesterovs_momentum=True, power_t=0.5,
                      random_state=None, shuffle=True, solver='adam', tol=0.0001,
                      validation_fraction=0.1, verbose=False, warm_start=False)
ann.fit(X, y)

app = dash.Dash(
    __name__, meta_tags=[{"name": "viewport", "content": "width=device-width"}]
)
server = app.server
# Create global chart template
mapbox_access_token = "pk.eyJ1IjoiamFja2x1byIsImEiOiJjajNlcnh3MzEwMHZtMzNueGw3NWw5ZXF5In0.fk8k06T96Ml9CLGgKmk81w"
app.config['suppress_callback_exceptions'] = True
# Create app layout
layout = dict(
    autosize=True,
    automargin=True,
    margin=dict(l=30, r=30, b=20, t=40),
    hovermode="closest",
    plot_bgcolor="#F9F9F9",
    paper_bgcolor="#F9F9F9",
    legend=dict(font=dict(size=10), orientation="h"),
    title="Satellite Overview",
    mapbox=dict(
        accesstoken=mapbox_access_token,
        style="light",
        center=dict(lon=-78.05, lat=42.54),
        zoom=7,
    ),
)

# Create app layout
app.layout = html.Div(
    [
        html.Div(
            [

                html.Div(
                    [
                        html.Div(
                            [
                                html.H2(
                                    "Electrical Power Prediction",
                                    style={"margin-bottom": "0px",
                                           'display': 'inline-block'},
                                ),
                                html.H6(
                                    """The dataset contains 9568 data points collected from a Combined Cycle Power Plant(CCPP) over 6 years 
                                    (2006-2011).Features have hourly average ambient variables Temperature (AT),Ambient Pressure (AP),
                                    Relative Humidity (RH) and Exhaust Vacuum (V) to predict the net hourly electrical energy output (PE) 
                                    of the plant.A CCPP is composed of gas turbines (GT),steam turbines (ST) and heat recovery steam generators.
                                    and the electricity is generated by gas and steam turbines,which are combined in one cycle,and is 
                                    transferred from one turbine to another.While the Vacuum is collected and has effect on the Steam Turbine,
                                    the other three of the ambient variables effect the GT performance.
                                    """,
                                    style={"margin-top": "2px",
                                           'align': "left"}
                                ),
                            ]
                        )
                    ],
                    className="two-third column",
                    id="title",
                )
            ],
            id="header",
            className="row flex-display",
            style={"margin-bottom": "25px"},
        ),
        html.Div([
            dash_table.DataTable(
                data=df.to_dict('records'),
                columns=[{'id': c, 'name': c} for c in df.columns],
                style_header={
                    'fontWeight': 'bold',
                    'border': 'thin lightgrey solid',
                    'backgroundColor': 'rgb(100, 100, 100)',
                    'color': 'white'
                },
                style_cell={
                    'fontFamily': 'Open Sans',
                    'textAlign': 'left',
                    'width': '150px',
                    'minWidth': '315px',
                    'maxWidth': '315px',
                    'whiteSpace': 'no-wrap',
                    'overflow': 'hidden',
                    'textOverflow': 'ellipsis',
                    'backgroundColor': 'Rgb(230,230,250)'
                },
                style_data_conditional=[{
                    'if': {'row_index': 'odd'},
                    'backgroundColor': 'rgb(248, 248, 248)'},
                    {
                        'if': {'column_id': 'PE'},
                        'backgroundColor': 'rgb(255, 255, 255)',
                        'color': 'black',
                        'fontWeight': 'bold',
                        'textAlign': 'center'
                    }
                ],
                fixed_rows={'headers': True, 'data': 0}
            )]),
        html.Div([
            html.H2(
                "Feature Correlation:",
                style={"margin-bottom": "5px",
                       "margin-top": "25px",
                       'display': 'inline-block'}, )
        ]),
        html.Div([
            html.Div([
                html.H5(
                    """Scatter Matrix
                    """,
                    style={"margin-top": "12px",
                           "margin-left": "350px",
                           'align': "center"}
                ),
            ],
                className="six columns"),
            html.Div([
                html.H5(
                    """Heatmap
                    """,
                    style={"margin-top": "12px",
                           "margin-left": "350px",
                           'align': "right"}
                ),
            ],
                className="six columns")
        ],
            className='row flex-display'),
        html.Div([
            html.Div([
                html.Img(

                    src=("assets/Scatter Matrix1.png"),
                    id="plotly-image6",
                    style={
                        "height": "800px",
                        "width": "900px",
                        "margin-bottom": "25px",
                        "margin-top": "3px",
                    },
                )
            ],
                className="six column"),
            html.Div([
                html.Img(

                    src=("assets/heatmap1.png"),
                    id="plotly-image7",
                    style={
                        "height": "700px",
                        "width": "750px",
                        "margin-bottom": "25px",
                    },
                )
            ],
                className="six column")
        ],
            className='row flex-display'),
        html.Div([
            html.H2(
                "Training Models and Prediction Accuracy:",
                style={"margin-bottom": "0px",
                       "margin-top": "15px",
                       'display': 'inline-block'}, )
        ]),

        html.Div([
            html.H6(
                """Mean Absolute Error (MAE) is the average of the difference between predicted and actual value in
                all test cases, without considering their direction. Root mean squared error (RMSE) is a quadratic scoring
                rule that also measures the average magnitude of the error. It’s the square root of the average of squared
                differences between prediction and actual observation. Both MAE and RMSE express average model prediction
                error in units of the variable of interest. Both metrics can range from 0 to ∞ and are indifferent to the
                direction of errors. They are negatively-oriented scores, which means lower values are better. That is why
                I have choose MAE and RMSE as prediction accuracy.
                """,
                style={"margin-top": "50px",
                       "margin-bottom": "20px",
                       'align': "left"}
            )
        ]),
        html.Div([
            html.Img(

                src=("assets/Linear Regression.png"),
                id="plotly-image",
                style={
                    "height": "700px",
                    "width": "1600px",
                    "margin-bottom": "25px",
                },
            )
        ]),
        html.Div([
            html.Img(

                src=("assets/Support Vector.png"),
                id="plotly-image2",
                style={
                    "height": "700px",
                    "width": "1600px",
                    "margin-bottom": "25px",
                },
            )
        ]),
        html.Div([
            html.Img(

                src=("assets/Random Forest.png"),
                id="plotly-image3",
                style={
                    "height": "700px",
                    "width": "1600px",
                    "margin-bottom": "25px",
                },
            )
        ]),
        html.Div([
            html.Img(

                src=("assets/Extreme Gradiant Boosting1.png"),
                id="plotly-image4",
                style={
                    "height": "700px",
                    "width": "1600px",
                    "margin-bottom": "25px",
                },
            )
        ]),
        html.Div([
            html.Img(

                src=("assets/Neural Network.png"),
                id="plotly-image5",
                style={
                    "height": "700px",
                    "width": "1600px",
                    "margin-bottom": "25px",
                },
            )
        ]),
        html.Div(
            [
                html.H2(
                    "Business Idea:",
                    style={"margin-top": "10px",
                           "margin-bottom": "5px",
                           'display': 'inline-block'},
                ),
                html.H6(
                    """From Upper figurs we can see that Neural Network Regression version has the lowest MAE and RMSE 
                    value. So we can easily say that, if a Combined Cycle Power Plant(CCPP) uses Neural Network Regression,
                    with the input data of hourly average ambient variables Temperature (AT),Ambient Pressure (AP),
                    Relative Humidity (RH) and Exhaust Vacuum (V), they can get a very good amount of prediction related
                    to the net hourly electrical energy output (PE).
                    """,
                    style={"margin-top": "2px",
                           'align': "left"}
                ),
            ]
        ),
        html.Div(
            [
                html.H2(
                    "Basic User Example:",
                    style={"margin-top": "10px",
                           "margin-bottom": "5px",
                           'display': 'inline-block'},
                ),
                html.H6(
                    """Here You can input hourly average ambient variables Temperature (AT),Ambient Pressure (AP),
                    Relative Humidity (RH) and Exhaust Vacuum (V) to get the prediction 
                    for the Net hourly Electrical Energy Output (PE) of an Combined Cycle Power Plant(CCPP.
                    """,
                    style={"margin-top": "2px",
                           'align': "left"}
                ),
            ]
        ),
        html.Div([
            dcc.Input(id="AT", type="number", placeholder="Ambient Temparature",
                      style={"margin-top": "10px"}),
            dcc.Input(id="AP", type="number", placeholder="Ambient Pressure"),
            dcc.Input(id="RH", type="number", placeholder="Relative Humidity"),
            dcc.Input(id="V", type="number", placeholder="Exhaust Vacuum"),
            html.Hr(),
            html.Div(id="PE"),

        ])
    ],

    id="mainContainer",
    style={"display": "flex", "flex-direction": "column"},
)


@app.callback(
    Output("PE", "children"),
    [Input("AT", "value"),
     Input("AP", "value"),
     Input("RH", "value"),
     Input("V", "value")]
)
def number_render(AT, AP, RH, V):
    if AT is None:
        raise PreventUpdate
    elif AP is None:
        raise PreventUpdate
    elif RH is None:
        raise PreventUpdate
    elif V is None:
        raise PreventUpdate
    inpList = [[AT, AP, RH, V]]
    asd = ann.predict(inpList)
    words = "Net Hourly Electrical Energy Output (PE) is " + str(asd).replace("[", "").replace("]", "") + "kwh"
    return words


if __name__ == '__main__':
    app.run_server(debug=True)
